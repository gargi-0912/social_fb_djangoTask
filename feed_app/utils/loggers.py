import logging
import traceback
from pymongo import MongoClient
from django.conf import settings
from rest_framework.views import exception_handler
from rest_framework.response import Response
from rest_framework import status

# Logger instance to be used by services
logger = logging.getLogger('backend_error_logger') 

class MongoLogHandler(logging.Handler):
    """Custom logging handler to send logs to a MongoDB collection."""

    def __init__(self):
        logging.Handler.__init__(self)
        try:
            # Requires MONGO_URI and MONGO_DB in settings.py
            client = MongoClient(settings.MONGO_URI)
            db = client[settings.MONGO_DB]
            self.collection = db['error_logs'] 
        except Exception:
            self.collection = None

    def emit(self, record):
        if not self.collection: return

        try:
            log_entry = {
                'timestamp': self.format(record.created),
                'level': record.levelname,
                'message': record.getMessage(),
                'pathname': record.pathname,
                'lineno': record.lineno,
            }

            if record.exc_info:
                log_entry['stack_trace'] = traceback.format_exc()
            
            self.collection.insert_one(log_entry)

        except Exception:
            pass # Fail silently if logging fails

# --- Global DRF Exception Handler ---
def custom_exception_handler(exc, context):
    """
    Handles API exceptions, logs 500 errors to MongoDB, and returns proper status codes.
    """
    response = exception_handler(exc, context) 

    if response is None or response.status_code >= 500:
        # Log all 5xx errors (Internal Server Errors, unexpected errors) to MongoDB
        logger.error(f"API Server Error: {exc}", exc_info=True)
        
        # If no standard DRF response was generated, create a generic 500
        if response is None:
            return Response({'detail': 'An unexpected server error occurred.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    # Return the proper response (whether generated by DRF or the custom 500)
    return response